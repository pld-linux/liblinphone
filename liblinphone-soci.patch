soci 4.1.x removed use(temporary)
--- liblinphone-5.4.17/src/db/main-db.cpp.orig	2025-05-15 12:10:44.000000000 +0200
+++ liblinphone-5.4.17/src/db/main-db.cpp	2025-05-20 18:42:07.239298152 +0200
@@ -1824,12 +1824,13 @@ void MainDbPrivate::updateConferenceChat
 	bool stateRequiresUpdatingParticipants = false;
 	if (state == ChatMessage::State::NotDelivered) {
 		const auto &meAddress = chatRoom->getMe()->getAddress();
+		const auto &eventId = chatMessage->getStorageId();
 		long long meAddressId = insertSipAddress(meAddress);
 		static const string query =
 		    "SELECT chat_message_participant.state FROM chat_message_participant WHERE event_id = :eventId AND "
 		    "chat_message_participant.participant_sip_address_id = :meAddressId";
 		soci::rowset<soci::row> rows =
-		    (session->prepare << query, soci::use(chatMessage->getStorageId()), soci::use(meAddressId));
+		    (session->prepare << query, soci::use(eventId), soci::use(meAddressId));
 		ChatMessage::State meParticipantState = ChatMessage::State::Idle;
 		for (const auto &row : rows) {
 			meParticipantState = static_cast<ChatMessage::State>(row.get<int>(0));
@@ -1852,7 +1853,8 @@ void MainDbPrivate::updateConferenceChat
 		                            " FROM sip_address, chat_message_participant"
 		                            " WHERE event_id = :eventId"
 		                            " AND sip_address.id = chat_message_participant.participant_sip_address_id";
-		soci::rowset<soci::row> rows = (session->prepare << query, soci::use(chatMessage->getStorageId()));
+		const auto &eventId = chatMessage->getStorageId();
+		soci::rowset<soci::row> rows = (session->prepare << query, soci::use(eventId));
 
 		// Use list of participants the client is sure have received the message and not the actual list of participants
 		// being part of the chatroom
@@ -4982,10 +4984,11 @@ list<shared_ptr<ChatMessage>> MainDb::ge
 		L_D();
 		list<shared_ptr<ChatMessage>> chatMessages;
 		auto epoch = d->dbSession.getTimeWithSociIndicator(0);
+		const auto maxMessages = EPHEMERAL_MESSAGE_TASKS_MAX_NB;
 		soci::rowset<soci::row> rows =
 		    getBackend() == MainDb::Backend::Sqlite3
 		        ? (d->dbSession.getBackendSession()->prepare << query, soci::use(epoch.first),
-		           soci::use(EPHEMERAL_MESSAGE_TASKS_MAX_NB))
+		           soci::use(maxMessages))
 		        : (d->dbSession.getBackendSession()->prepare << query, soci::use(epoch.first));
 		for (const auto &row : rows) {
 			const long long &dbChatRoomId = d->dbSession.resolveId(row, (int)row.size() - 1);
@@ -5755,9 +5758,10 @@ list<shared_ptr<EventLog>> MainDb::getHi
 			const EventLogPrivate *dEventLog = event->getPrivate();
 			MainDbKeyPrivate *dEventKey = static_cast<MainDbKey &>(dEventLog->dbKey).getPrivate();
 			const long long &dbEventId = dEventKey->storageId;
+			const auto before_plus_1 = before + 1, after_plus_1 = after + 1;
 
 			soci::rowset<soci::row> rows = (d->dbSession.getBackendSession()->prepare << query, soci::use(dbChatRoomId),
-			                                soci::use(dbEventId), soci::use(before + 1), soci::use(after + 1));
+			                                soci::use(dbEventId), soci::use(before_plus_1), soci::use(after_plus_1));
 
 			for (const auto &row : rows) {
 				shared_ptr<EventLog> event = d->selectGenericConferenceEvent(chatRoom, row);
